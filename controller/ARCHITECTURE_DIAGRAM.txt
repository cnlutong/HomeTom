╔══════════════════════════════════════════════════════════════════════════════╗
║                       HomeTom 控制器架构图（详细版）                          ║
╚══════════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────────┐
│                              WebUI / Client                                  │
│                          (Browser / Mobile App)                              │
└────────────────────┬────────────────────────────┬────────────────────────────┘
                     │                            │
              HTTP/REST API                  WebSocket
           (JSON Request/Response)        (Real-time Push)
                     │                            │
┌────────────────────┴────────────────────────────┴────────────────────────────┐
│                            API Layer (FastAPI)                                │
│  ┌─────────────────────────────────────────────────────────────────────┐    │
│  │                     统一错误处理中间件                               │    │
│  │                  (ControllerExceptionHandler)                        │    │
│  └─────────────────────────────────────────────────────────────────────┘    │
│  ┌──────────────┬──────────────┬──────────────┬──────────────────────┐     │
│  │  Devices     │   Scenes     │   System     │   WebSocket          │     │
│  │  Routes      │   Routes     │   Routes     │   Handler            │     │
│  │              │              │              │                      │     │
│  │ GET /devices │ GET /scenes  │ GET /status  │ /ws                  │     │
│  │ POST /control│ POST /scenes │ GET /health  │ • broadcast()        │     │
│  │ GET /state   │ POST /trigger│              │ • send_message()     │     │
│  └──────────────┴──────────────┴──────────────┴──────────────────────┘     │
└─────────────────────────────────────┬──────────────────────────────────────┘
                                      │ Depends()
┌─────────────────────────────────────┴──────────────────────────────────────┐
│                        Application Services Layer                            │
│  ┌─────────────────┬─────────────────┬─────────────────────────────────┐   │
│  │ DeviceService   │  SceneService   │       EventBus (简化版)         │   │
│  │                 │                 │                                 │   │
│  │ • get_device()  │ • create_scene()│  _handlers: Dict[str, List]    │   │
│  │ • control()     │ • trigger()     │                                 │   │
│  │ • sync_state()  │ • activate()    │  • subscribe(type, handler)    │   │
│  │ • add_device()  │ • update()      │  • publish(type, data)         │   │
│  │                 │                 │    └─> create_task(非阻塞)     │   │
│  └─────────────────┴─────────────────┴─────────────────────────────────┘   │
│                                      ↓ 发布事件                              │
│                      device_state_changed, scene_triggered, etc.            │
└─────────────────────────────────────┬──────────────────────────────────────┘
                                      │
┌─────────────────────────────────────┴──────────────────────────────────────┐
│                            Domain Layer (核心业务逻辑)                        │
│  ┌─────────────────────────────────────────────────────────────────────┐   │
│  │                             Entities                                 │   │
│  │  ┌──────────────────┐         ┌──────────────────────────────┐     │   │
│  │  │  Device          │         │  Scene                       │     │   │
│  │  │  • id: str       │         │  • id: str                   │     │   │
│  │  │  • name: str     │         │  • name: str                 │     │   │
│  │  │  • type: str     │         │  • definition: SceneDefinition│     │   │
│  │  │  • config: dict  │         │  • is_active: bool           │     │   │
│  │  └──────────────────┘         └──────────────────────────────┘     │   │
│  │                                                                      │   │
│  │  ┌──────────────────┐                                               │   │
│  │  │  DeviceState     │                                               │   │
│  │  │  • state: str    │                                               │   │
│  │  │  • attributes:{}│                                               │   │
│  │  └──────────────────┘                                               │   │
│  └─────────────────────────────────────────────────────────────────────┘   │
│                                                                              │
│  ┌─────────────────────────────────────────────────────────────────────┐   │
│  │                       Scene Engine (核心引擎)                        │   │
│  │  ┌──────────────────────────────────────────────────────────────┐  │   │
│  │  │ 1. Parser (解析器)                                            │  │   │
│  │  │    • parse(definition) -> SceneDefinition                    │  │   │
│  │  │    • validate_trigger()                                      │  │   │
│  │  │    • validate_action()                                       │  │   │
│  │  └──────────────────────────────────────────────────────────────┘  │   │
│  │                                                                      │   │
│  │  ┌──────────────────────────────────────────────────────────────┐  │   │
│  │  │ 2. Conditions (策略模式条件评估器)                            │  │   │
│  │  │                                                                │  │   │
│  │  │    ┌────────────────────────────────────────────────────┐    │  │   │
│  │  │    │  Condition (抽象基类)                              │    │  │   │
│  │  │    │    + evaluate(context) -> bool                     │    │  │   │
│  │  │    └────────────────┬───────────────────────────────────┘    │  │   │
│  │  │                     │                                         │  │   │
│  │  │         ┌───────────┼───────────┬─────────────────────┐      │  │   │
│  │  │         ↓           ↓           ↓                     ↓      │  │   │
│  │  │  DeviceState  TimeRange  ConditionGroup      (可扩展) │  │   │
│  │  │  Condition    Condition    (AND/OR)                         │  │   │
│  │  │                                                                │  │   │
│  │  │    ┌────────────────────────────────────────────────────┐    │  │   │
│  │  │    │  ConditionFactory (工厂模式)                       │    │  │   │
│  │  │    │    _registry = {                                   │    │  │   │
│  │  │    │      "device_state": DeviceStateCondition,         │    │  │   │
│  │  │    │      "time_range": TimeRangeCondition,             │    │  │   │
│  │  │    │    }                                                │    │  │   │
│  │  │    │    + create(condition_data) -> Condition           │    │  │   │
│  │  │    │    + register(type, class)  (扩展点)               │    │  │   │
│  │  │    └────────────────────────────────────────────────────┘    │  │   │
│  │  └──────────────────────────────────────────────────────────────┘  │   │
│  │                                                                      │   │
│  │  ┌──────────────────────────────────────────────────────────────┐  │   │
│  │  │ 3. Executor (执行器)                                          │  │   │
│  │  │    • execute_scene(scene) -> ExecutionResult                 │  │   │
│  │  │      1. 准备上下文（获取设备状态）                            │  │   │
│  │  │      2. 评估条件（调用 ConditionEvaluator）                  │  │   │
│  │  │      3. 执行动作序列                                          │  │   │
│  │  │         - device_control -> HAL                              │  │   │
│  │  │         - delay -> asyncio.sleep()                           │  │   │
│  │  │      4. 返回执行结果                                          │  │   │
│  │  └──────────────────────────────────────────────────────────────┘  │   │
│  │                                                                      │   │
│  │  ┌──────────────────────────────────────────────────────────────┐  │   │
│  │  │ 4. Scheduler (调度器 - APScheduler)                          │  │   │
│  │  │    • register_scene(scene, callback)                         │  │   │
│  │  │    • unregister_scene(scene_id)                              │  │   │
│  │  │    • _job_map: Dict[scene_id, job_id]                        │  │   │
│  │  │                                                                │  │   │
│  │  │    Cron Trigger -> 定时执行 callback(scene)                  │  │   │
│  │  └──────────────────────────────────────────────────────────────┘  │   │
│  └─────────────────────────────────────────────────────────────────────┘   │
└─────────────────────────────────────┬──────────────────────────────────────┘
                                      │
┌─────────────────────────────────────┴──────────────────────────────────────┐
│                      Infrastructure Layer (技术实现)                         │
│  ┌──────────────────────────────────────────────────────────────────────┐  │
│  │  HAL Adapter (httpx 客户端 - 连接池优化)                             │  │
│  │  ┌────────────────────────────────────────────────────────────────┐  │  │
│  │  │  HALClient                                                      │  │  │
│  │  │    _client = httpx.AsyncClient(                                │  │  │
│  │  │      base_url=config.HAL_ENDPOINT,                             │  │  │
│  │  │      timeout=5,                                                 │  │  │
│  │  │      limits=Limits(                                             │  │  │
│  │  │        max_connections=10,        ← 连接池配置                 │  │  │
│  │  │        max_keepalive_connections=5                             │  │  │
│  │  │      ),                                                         │  │  │
│  │  │      transport=AsyncHTTPTransport(retries=2)  ← 自动重试       │  │  │
│  │  │    )                                                            │  │  │
│  │  │                                                                  │  │  │
│  │  │    • get_device_state(device_id) -> DeviceState                │  │  │
│  │  │    • control_device(device_id, command) -> bool                │  │  │
│  │  │    • health_check() -> bool                                    │  │  │
│  │  │    • subscribe_events(callback)  (预留接口)                   │  │  │
│  │  └────────────────────────────────────────────────────────────────┘  │  │
│  │                                                                        │  │
│  │  ┌────────────────────────────────────────────────────────────────┐  │  │
│  │  │  MockHALClient (测试用)                                        │  │  │
│  │  │    _mock_states: Dict[str, DeviceState]                        │  │  │
│  │  └────────────────────────────────────────────────────────────────┘  │  │
│  └──────────────────────────────────────────────────────────────────────┘  │
│                                                                              │
│  ┌──────────────────────────────────────────────────────────────────────┐  │
│  │  Database (SQLite + aiosqlite)                                       │  │
│  │  ┌────────────────────────────────────────────────────────────────┐  │  │
│  │  │  Schema (精简版)                                                │  │  │
│  │  │    ┌──────────────┐      ┌──────────────┐                      │  │  │
│  │  │    │  devices     │      │   scenes     │                      │  │  │
│  │  │    ├──────────────┤      ├──────────────┤                      │  │  │
│  │  │    │ id (PK)      │      │ id (PK)      │                      │  │  │
│  │  │    │ name         │      │ name         │                      │  │  │
│  │  │    │ type         │      │ description  │                      │  │  │
│  │  │    │ config (JSON)│      │ definition   │                      │  │  │
│  │  │    │ created_at   │      │ is_active    │                      │  │  │
│  │  │    └──────────────┘      │ created_at   │                      │  │  │
│  │  │                          └──────────────┘                      │  │  │
│  │  │                                                                  │  │  │
│  │  │  注：历史记录表后续扩展                                         │  │  │
│  │  └────────────────────────────────────────────────────────────────┘  │  │
│  │                                                                        │  │
│  │  ┌────────────────────────────────────────────────────────────────┐  │  │
│  │  │  Repositories (仓储模式)                                        │  │  │
│  │  │    • DeviceRepository                                           │  │  │
│  │  │      - get_all() -> List[Device]                                │  │  │
│  │  │      - get_by_id(id) -> Device                                  │  │  │
│  │  │      - save(device)                                             │  │  │
│  │  │                                                                  │  │  │
│  │  │    • SceneRepository                                            │  │  │
│  │  │      - get_all(active_only) -> List[Scene]                      │  │  │
│  │  │      - save(scene)                                              │  │  │
│  │  │      - update_active_status(id, is_active)                      │  │  │
│  │  └────────────────────────────────────────────────────────────────┘  │  │
│  └──────────────────────────────────────────────────────────────────────┘  │
│                                                                              │
│  ┌──────────────────────────────────────────────────────────────────────┐  │
│  │  StateManager (纯内存状态 - 优化版)                                 │  │
│  │  ┌────────────────────────────────────────────────────────────────┐  │  │
│  │  │    _states: Dict[device_id, DeviceState]                        │  │  │
│  │  │    _lock: asyncio.Lock                    ← 线程安全            │  │  │
│  │  │                                                                  │  │  │
│  │  │    • get_state(device_id) -> DeviceState                        │  │  │
│  │  │    • set_state(device_id, state)                                │  │  │
│  │  │    • update_state_attributes(device_id, attrs)                  │  │  │
│  │  │                                                                  │  │  │
│  │  │  注：应用重启时从 HAL 重新加载，无需数据库同步                  │  │  │
│  │  └────────────────────────────────────────────────────────────────┘  │  │
│  └──────────────────────────────────────────────────────────────────────┘  │
└─────────────────────────────────────┬──────────────────────────────────────┘
                                      │
                                      ↓ HTTP/REST API
                            ┌─────────────────────┐
                            │   HAL API (硬件层)   │
                            │  • 设备控制接口      │
                            │  • 状态查询接口      │
                            │  • 事件推送接口      │
                            └─────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
                                数据流示意图
═══════════════════════════════════════════════════════════════════════════════

【设备控制流程】
WebUI → API → DeviceService → HALClient → HAL
                     ↓
               StateManager (更新内存状态)
                     ↓
                EventBus (publish: device_state_changed)
                     ↓
            ┌────────┴────────┐
            ↓                 ↓
       SceneEngine        WebSocket
     (检查触发条件)      (推送给前端)


【场景触发流程】
┌─ 定时触发 (Scheduler) ─┐
│                         ├─→ SceneService.trigger_scene()
└─ 手动触发 (API) ───────┘              ↓
                                  SceneExecutor
                                        ↓
                          1. 准备上下文 (StateManager)
                                        ↓
                          2. 评估条件 (ConditionEvaluator)
                                        ↓
                          3. 执行动作 (HALClient.control_device)
                                        ↓
                          4. 发布事件 (EventBus.publish)
                                        ↓
                                  WebSocket 推送


【事件流转】
HAL 状态变化 → StateManager.set_state()
                      ↓
            EventBus.publish(device_state_changed)
                      ↓
            ┌─────────┴─────────┐
            ↓                   ↓
      SceneEngine         WebSocket
    (评估所有场景触发器)  (推送到前端)
            ↓
    满足条件 → 执行场景


═══════════════════════════════════════════════════════════════════════════════
                              依赖注入关系图
═══════════════════════════════════════════════════════════════════════════════

FastAPI App
    │
    ├─ get_hal_client() ──────────→ HALClient (单例)
    │                                   │
    ├─ get_state_manager() ───────→ StateManager (单例)
    │                                   │
    ├─ get_event_bus() ───────────→ EventBus (单例)
    │                                   │
    ├─ get_scene_scheduler() ─────→ SceneScheduler (单例)
    │                                   │
    ├─ get_db() ──────────────────→ aiosqlite.Connection (每请求)
    │   │                               │
    │   ├─→ DeviceRepository ───────────┤
    │   └─→ SceneRepository ────────────┤
    │                                   │
    ├─ get_device_service() ──────→ DeviceService (每请求)
    │   (依赖: repo, hal, state, event)
    │                                   │
    └─ get_scene_service() ───────→ SceneService (每请求)
        (依赖: repo, executor, scheduler, event)


═══════════════════════════════════════════════════════════════════════════════
                              优化点标注
═══════════════════════════════════════════════════════════════════════════════

✓ 优化 #2：EventBus 使用简化的观察者模式（80 行代码）
✓ 优化 #3：StateManager 纯内存设计 + asyncio.Lock 线程安全
✓ 优化 #4：数据库仅保留 devices 和 scenes 核心表
✓ 优化 #6：Conditions 使用策略模式 + 工厂模式，易扩展
✓ 优化 #8：HALClient 配置连接池、超时和重试
✓ 优化 #11：统一的异常处理中间件
✓ 优化 #12：Pydantic Settings 配置管理
✓ 优化 #13：依赖注入支持测试模式（MockHALClient）

